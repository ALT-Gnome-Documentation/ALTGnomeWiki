{
  "name": "markdown-it-conditional-render",
  "version": "0.1.0",
  "description": "Plugin for creating if-else conditional blocks for markdown-it markdown parser.",
  "author": "Palm Civet <palmcivet_email@qq.com>",
  "license": "MIT",
  "homepage": "https://palmcivet.github.io/markdown-it-conditional-render",
  "repository": "https://github.com/palmcivet/markdown-it-conditional-render.git",
  "bugs": "https://github.com/palmcivet/markdown-it-conditional-render/issues",
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "files": [
    "dist/"
  ],
  "types": "dist/index.d.ts",
  "keywords": [
    "markdown-it",
    "markdown-it-plugin",
    "markdown-it-condition",
    "conditional-rendering"
  ],
  "devDependencies": {
    "@rollup/plugin-typescript": "^8.3.3",
    "jest": "^28.1.1",
    "rollup": "^2.75.6",
    "ts-jest": "^28.0.5",
    "tslib": "^2.4.0",
    "typescript": "^4.7.3",
    "vite": "^2.9.12"
  },
  "peerDependencies": {
    "markdown-it": "13"
  },
  "optionalDependencies": {
    "markdown-it": "^13.0.1",
    "@types/jest": "^28.1.2",
    "@types/markdown-it": "^12.2.3"
  },
  "scripts": {
    "dev": "vite ./demo",
    "test": "jest",
    "build:doc": "vite build ./demo --base=/markdown-it-conditional-render/",
    "build:lib": "vite build"
  },
  "readme": "# markdown-it-conditional-render\n\n[![build](https://github.com/palmcivet/markdown-it-conditional-render/actions/workflows/build.yml/badge.svg)](https://github.com/palmcivet/markdown-it-conditional-render/actions/workflows/build.yml)\n\nEnglish | [‰∏≠Êñá](./README.zh-CN.md)\n\nMarkdown It conditional rendering plugin, inspired by [markdown-it-condition](https://www.npmjs.com/package/markdown-it-condition), the original repository has been removed or moved, but the compiled and compressed code is still available in NPM and has been extracted from [lib/markdown-it-condition.js](./lib/markdown-it-condition.js).\n\n[Demo](https://palmcivet.github.io/markdown-it-conditional-render/)\n\n## ‚öôÔ∏è Options\n\n- `ruleName`Ôºö*string*\n  - Default: `condition`\n  - Custom rule name\n- `ifMarker`Ôºö*string*\n  - Default: `::if`\n  - Judging from here, *if* branching condition\n- `elseIfMarker`Ôºö*string*\n  - Default: `::elseif`\n  - *else if* branching condition\n- `elseMarker`Ôºö*string*\n  - Default: `::else`\n  - *else* branching condition\n- `endIfMarker`Ôºö*string*\n  - Default: `::endif`\n  - End of judgment\n- `validate(condition: string): boolean`\n  - Preprocess the original text and verify the branching conditions in the text\n  - Default returns `true`\n- `evaluate(condition: string, value: any): boolean`\n  - Parse the actual parameters and remove the text that does not meet the conditions\n  - The default processing is as followsÔºö\n\n\t```ts\n\tfunction evaluate(condition: string, value: any) {\n\t\tlet element = value;\n\t\tcondition.split(\".\").forEach((field) => {\n\t\t\telement = element[field];\n\t\t});\n\n\t\tif (!!element) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\t```\n\n> The full usage of each parameter by default is shown in the [example](#-example)\n\n## üìö Example\n\n```js\nconst MarkdownIt = require(\"markdown-it\")\nconst markdownItEngine = new MarkdownIt();\nconst markdownItConditionalRender = require(\"markdown-it-conditional-render\");\n\nmarkdownItEngine.use(markdownItConditionalRender);\n\nconst res = markdownItEngine.render(\n  `\n::if flag.value\n\n*This text will be shown*\n\n::else\n\n*This text won't\n\n::endif\n`,\n{\n  flag: {\n    value: true,\n  },\n});\n\nconsole.log(res);\n```\n\n## üîß Develop\n\n```bash\n$ git clone https://github.com/palmcivet/markdown-it-conditional-render.git\n$ cd ./markdown-it-conditional-render\n$ pnpm add\n$ pnpm run build\n```\n\n## ‚öñÔ∏è License\n\nMIT\n"
}